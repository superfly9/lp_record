# Cursor Rules — LP 관리 & 좌석 예약 프로젝트

## 프로젝트 개요
- 목적: 보유 LP 목록 관리, 좌석 예약/현황 제공, 이용 안내 및 관리자 운영.
- 우선순위: 쉬운 유지보수, 가독성 높은 코드, 비개발자도 관리 가능한 어드민.

## 기술/아키텍처 원칙
- Next.js 14(App Router) + TypeScript.
- 스타일: Tailwind CSS 기본. 서버 사이드 렌더링(SSR)과 호환되는 방식 우선.
  - CSS-in-JS는 지양(필요 시 최소화). 컴포넌트 단위 스타일은 Tailwind + class-variance-authority(shadcn/ui) 활용.
- UI: shadcn/ui(Headless + 접근성 우선) 채택.
- 데이터: Supabase(PostgreSQL) 사용 — DB + 자동 REST API/Realtime.
- API 사용 원칙(하이브리드):
  - 단순 CRUD/조회/리스트: 클라이언트/서버 컴포넌트에서 Supabase 직접 호출.
  - 복잡/보안/외부 연동: Next.js Route API(`/app/api/**/route.ts`)에서 처리(서버 전용 비즈니스 로직).
- 렌더링: 기본은 서버 컴포넌트. 상태/이벤트가 필요한 곳만 클라이언트 컴포넌트.

## 페이지 구조(초기)
- `/` 홈: LP 하이라이트 + 좌석 현황 요약.
- `/lps` LP 목록/검색/필터/상세.
- `/seats` 좌석 현황/예약/실시간 업데이트.
- `/guide` 이용 안내/규칙/FAQ.
- `/admin` 어드민(역할 기반 접근 제어).

## 데이터 모델(초안)
- `profiles`: { id(uuid=auth.uid), display_name, role('admin'|'user'), created_at }
- `lps`: { id, title, artist, genre, year, cover_url, condition, notes, created_at, updated_at }
- `seats`: { id, name, status('available'|'reserved'|'occupied'|'out_of_service'), notes }
- `reservations`: { id, seat_id, user_id(uuid), start_time, end_time, status('active'|'cancelled'|'completed'), notes, created_at }

## RLS(원칙)
- `lps`: SELECT 모두 허용, INSERT/UPDATE/DELETE는 role='admin'만.
- `seats`: SELECT 모두 허용, 변경은 admin만.
- `reservations`:
  - INSERT: 로그인 사용자 자신의 `user_id=auth.uid()`만 가능, 서버에서는 서비스 롤키로 예외 처리 가능.
  - SELECT: 본인 것 + admin은 전체.
  - UPDATE/DELETE: 본인 예약(미래 시점) 또는 admin.

## API 설계 원칙
- Supabase 직접 호출(간단):
  - LP 목록/필터/상세, 좌석 현황 조회, 기본 통계(가벼운 집계).
- Route API(복잡/보안/외부):
  - 예약 생성/취소(중복/시간 검증, 트랜잭션 유사 처리, 알림 발송).
  - 관리자 일괄 작업(예: 좌석 상태 대량 변경, 공지 발송).
  - 이미지 업로드 전처리/서명 URL 발급(필요 시), 외부 API(Discogs) 연동.

## 인증/권한
- Supabase Auth 사용 또는 NextAuth(Supabase Adapter) 선택 가능. 기본값: Supabase Auth.
- `profiles.role`로 권한 제어(admin/user). 서버 로직에서는 세션/토큰 검증 필수.

## 실시간(Realtime)
- `seats`, `reservations` 테이블에 대해 Supabase Realtime 채널 구독.
- 좌석/예약 상태 변경 시 클라이언트에서 UI 즉시 반영.

## 환경변수
- 공개(브라우저 사용): `NEXT_PUBLIC_SUPABASE_URL`, `NEXT_PUBLIC_SUPABASE_ANON_KEY`.
- 서버 전용: `SUPABASE_SERVICE_ROLE_KEY`, (선택) `NEXTAUTH_SECRET`.
- 비밀은 절대 코드/규칙 파일에 직접 기재 금지. `.env.local`/플랫폼 시크릿 사용.

## 배포/운영
- 개발: 로컬 Node(dev 서버)에서 실행.
- 운영: Vercel 배포 권장 — Route API는 서버리스 함수로 동작. 전역 CDN/확장성 활용.
- 에러/로그: 서버 코드는 콘솔 로그를 적절히 사용하되 PII는 기록 금지.

## 코딩 규칙(가독성/접근성 중심)
- 이름: 의미 있는 식별자 사용. 축약어 지양. 이벤트 핸들러는 `handle*` 접두어.
- 함수 선언: `const fnName = () => {}` 형태 사용. 타입 정의 적극 활용.
- 제어 흐름: Early Return 우선, 깊은 중첩 회피.
- 접근성: 대화형 요소에 `tabIndex`, `aria-*`, 키보드 핸들링(onKeyDown) 포함.
- 컴포넌트: 작은 단위로 분리, DRY 원칙 준수. 불필요한 HOC/컨텍스트 남용 금지.
- 서버/클라이언트 구분: "use client"는 필요한 파일에만.
- 스타일: Tailwind 유틸리티 우선, 반복되는 패턴은 컴포넌트/variants로 추출.

## 언어/문서화
- 기본 응답/라벨/문서: 한국어 우선.
- 프로젝트 결정/정책은 `README.md`와 본 파일에 명시. 변경 시 PR에서 이유 기록.

## 체크리스트(구현 시 확인)
- [ ] RLS 정책 작성/테스트 완료.
- [ ] 예약 중복/시간 검증 Route API 구현 및 에러 처리.
- [ ] Realtime 구독으로 좌석/예약 UI 실시간 반영.
- [ ] 어드민 UI에서 LP/좌석/예약 관리 가능(비개발자 친화).
- [ ] 환경변수/시크릿 설정 및 배포 환경 검증.

## 기타
- 비밀키/개인정보는 장기기억/규칙/코드에 저장 금지.
- 팀/외부 공유가 필요한 고정 정책은 본 `cursorrules`에 우선 기록.
